#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#pragma execution_character_set("utf-8")
#define _CRT_SECURE_NO_WARNINGS


#define SPACE 5
typedef struct Node {
    int key;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int key) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->left = newNode->right = NULL;
    return newNode;
}

Node* insert(Node* root, int key) {
    if (root == NULL) return createNode(key);

    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);
    return root;
}

Node* findMin(Node* root) {
    while (root && root->left != NULL)
        root = root->left;
    return root;
}

Node* deleteNode(Node* root, int key) {
    if (root == NULL) return NULL;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL) {
            Node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            free(root);
            return temp;
        }
        Node* temp = findMin(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}
void printTree(Node* root, int space) {
    if (root == NULL)
        return;
    space += 5;

    printTree(root->right, space);

    printf("\n");
    for (int i = 5; i < space; i++)
        printf(" ");
    printf("%d\n", root->key);
    printTree(root->left, space);
}


int main() {
    SetConsoleOutputCP(CP_UTF8);
    Node* root = NULL;
    int choice, value;

    do {
        printf("\n--- Меню ---\n");
        printf("1. Добавить элемент\n");
        printf("2. Удалить элемент\n");
        printf("3. Вывод\n");
        printf("0. Выход\n");
        printf("Ваш выбор: ");
        scanf_s("%d", &choice);

        switch (choice) {
        case 1:
            printf("Введите значение для добавления: ");
            scanf_s("%d", &value);
            root = insert(root, value);
            break;
        case 2:
            printf("Введите значение для удаления: ");
            scanf_s("%d", &value);
            root = deleteNode(root, value);
            break;
        case 3:
            printf("Дерево: ");
            printTree(root,0);
            printf("\n");
            break;
        case 0:
            printf("Выход.\n");
            break;
        default:
            printf("Неверный выбор.\n");
        }
    } while (choice != 0);
    return 0;
}
